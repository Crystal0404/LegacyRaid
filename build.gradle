plugins {
    id 'dev.architectury.loom' version '1.6-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
    id 'com.github.hierynomus.license' version '0.16.1' apply false
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.hierynomus.license'

    base {
        // Set up a suffixed format for the mod jar names, e.g. `example-fabric`.
        archivesName = "$rootProject.archives_name-$project.name"
    }
    version = "v$rootProject.mod_version-mc$rootProject.minecraft_version"

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
        mappings loom.layered {
            it.mappings("net.fabricmc:yarn:$rootProject.yarn_mappings:v2")
            it.mappings("dev.architectury:yarn-mappings-patch-neoforge:$rootProject.yarn_mappings_patch_neoforge_version")
        }
    }

    loom {
        runConfigs.configureEach {
            vmArg "-Dmixin.debug.export=true"
        }

        mixin {
            useLegacyMixinAp = false
        }
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    jar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${project.archives_name}" }
        }
    }

    license {
        // use "gradle licenseFormat" to apply license headers
        header = rootProject.file('HEADER.txt')
        include '**/*.java'
        skipExistingHeaders = true

        headerDefinitions {
            // ref: https://github.com/mathieucarbou/license-maven-plugin/blob/4c42374bb737378f5022a3a36849d5e23ac326ea/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/header/HeaderType.java#L48
            // modification: add a newline at the end
            SLASHSTAR_STYLE_NEWLINE {
                firstLine = "/*"
                beforeEachLine = " * "
                endLine = " */" + System.lineSeparator()
                afterEachLine = ""
                skipLinePattern = null
                firstLineDetectionPattern = "(\\s|\\t)*/\\*.*\$"
                lastLineDetectionPattern = ".*\\*/(\\s|\\t)*\$"
                allowBlankLines = false
                isMultiline = true
                padLines = false
            }
        }
        mapping {
            java = 'SLASHSTAR_STYLE_NEWLINE'
        }
        ext {
            name = rootProject.archives_name
            author = 'Crystal0404'
            year = Calendar.getInstance().get(Calendar.YEAR).toString()
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
    }

    // Configure Maven publishing.
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            // Add repositories to publish to here.
            // Notice: This block does NOT have the same function as the block in the top level.
            // The repositories here will be used for publishing your artifact, not for
            // retrieving dependencies.
        }
    }
}
